
    List<int> currentGen = startState;
    List<int> neighborTallyList = new List<int>();
    List<int> nextGen = new List<int>();

    System.Random random = new System.Random();

    int cellRowPosit = 0;
    int cellColPosit = 0;
    int cellNextState = 0;
    int cellCurrentState = 0;
    int counter1 = 0;
    int counter2 = 0;
    int counter3 = 0;
    int counter4 = 0;
    int counter5 = 0;
    int counter6 = 0;
    int counter7 = 0;

    for (int j = 0; j < loopcount; ++j ) {

      nextGen.Clear();

      for (int k = 0; k < currentGen.Count; ++k ) {
        cellRowPosit = ( k / columns) + 1;
        cellColPosit = ( (k) % columns) + 1;
        cellCurrentState = currentGen[k];
        counter1 = 0;
        counter2 = 0;
        counter3 = 0;
        counter4 = 0;
        counter5 = 0;
        counter6 = 0;
        counter7 = 0;

        if (cellRowPosit != 1 && cellRowPosit != rows && cellColPosit != 1 && cellColPosit != columns) {

          //check all neighbors and tally states
          if (currentGen[k + columns] == 1) {counter1 += 1;}
          else if (currentGen[k + columns] == 2) {counter2 += 1;}
          else if (currentGen[k + columns] == 3) {counter3 += 1;}
          else if (currentGen[k + columns] == 4) {counter4 += 1;}
          else if (currentGen[k + columns] == 5) {counter5 += 1;}
          else if (currentGen[k + columns] == 6) {counter6 += 1;}
          else if (currentGen[k + columns] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k + columns + 1] == 1) {counter1 += 1;}
          else if (currentGen[k + columns + 1] == 2) {counter2 += 1;}
          else if (currentGen[k + columns + 1] == 3) {counter3 += 1;}
          else if (currentGen[k + columns + 1] == 4) {counter4 += 1;}
          else if (currentGen[k + columns + 1] == 5) {counter5 += 1;}
          else if (currentGen[k + columns + 1] == 6) {counter6 += 1;}
          else if (currentGen[k + columns + 1] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k + 1] == 1) {counter1 += 1;}
          else if (currentGen[k + 1] == 2) {counter2 += 1;}
          else if (currentGen[k + 1] == 3) {counter3 += 1;}
          else if (currentGen[k + 1] == 4) {counter4 += 1;}
          else if (currentGen[k + 1] == 5) {counter5 += 1;}
          else if (currentGen[k + 1] == 6) {counter6 += 1;}
          else if (currentGen[k + 1] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k - columns + 1] == 1) {counter1 += 1;}
          else if (currentGen[k - columns + 1] == 2) {counter2 += 1;}
          else if (currentGen[k - columns + 1] == 3) {counter3 += 1;}
          else if (currentGen[k - columns + 1] == 4) {counter4 += 1;}
          else if (currentGen[k - columns + 1] == 5) {counter5 += 1;}
          else if (currentGen[k - columns + 1] == 6) {counter6 += 1;}
          else if (currentGen[k - columns + 1] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k - columns] == 1) {counter1 += 1;}
          else if (currentGen[k - columns] == 2) {counter2 += 1;}
          else if (currentGen[k - columns] == 3) {counter3 += 1;}
          else if (currentGen[k - columns] == 4) {counter4 += 1;}
          else if (currentGen[k - columns] == 5) {counter5 += 1;}
          else if (currentGen[k - columns] == 6) {counter6 += 1;}
          else if (currentGen[k - columns] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k - columns - 1] == 1) {counter1 += 1;}
          else if (currentGen[k - columns - 1] == 2) {counter2 += 1;}
          else if (currentGen[k - columns - 1] == 3) {counter3 += 1;}
          else if (currentGen[k - columns - 1] == 4) {counter4 += 1;}
          else if (currentGen[k - columns - 1] == 5) {counter5 += 1;}
          else if (currentGen[k - columns - 1] == 6) {counter6 += 1;}
          else if (currentGen[k - columns - 1] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k - 1] == 1) {counter1 += 1;}
          else if (currentGen[k - 1] == 2) {counter2 += 1;}
          else if (currentGen[k - 1] == 3) {counter3 += 1;}
          else if (currentGen[k - 1] == 4) {counter4 += 1;}
          else if (currentGen[k - 1] == 5) {counter5 += 1;}
          else if (currentGen[k - 1] == 6) {counter6 += 1;}
          else if (currentGen[k - 1] == 7) {counter7 += 1;}
          else {continue;}

          if (currentGen[k + columns - 1] == 1) {counter1 += 1;}
          else if (currentGen[k + columns - 1] == 2) {counter2 += 1;}
          else if (currentGen[k + columns - 1] == 3) {counter3 += 1;}
          else if (currentGen[k + columns - 1] == 4) {counter4 += 1;}
          else if (currentGen[k + columns - 1] == 5) {counter5 += 1;}
          else if (currentGen[k + columns - 1] == 6) {counter6 += 1;}
          else if (currentGen[k + columns - 1] == 7) {counter7 += 1;}
          else {continue;}


            //if a cell is central to a current city, leave it a city
          if ( cellCurrentState == 1 && counter1 >= 5 ) {
            cellNextState = 1;
          }
            //if a cell is on the edge of a city, clear it
          else if ( cellCurrentState == 1 && counter1 <= 4 ) {
            cellNextState = 3;
          }
            //if a cell is old agricultural and on the edge of a new settlement, prep it for agroforestry cycle
          else if ( cellCurrentState == 2 && counter4 >= 2 ) {
            cellNextState = 3;
          }
            //if a cell is old agricultural and touching old city, prep it for agroforestry
          else if ( cellCurrentState == 2 && counter1 >= 3 ) {
            cellNextState = 3;
          }
          else if ( cellCurrentState == 3  ) {
            cellNextState = 4;
          }
          else if ( cellCurrentState == 4 && counter4 == 2 ) {
            cellNextState = 4;
          }
          else if ( cellCurrentState == 4 && counter4 == 3 ) {
            cellNextState = 4;
          }
          else if ( cellCurrentState == 4 && counter4 >= 6 ) {
            cellNextState = 5;
          }
          else if ( cellCurrentState == 4 && counter4 <= 1 ) {
            cellNextState = 5;
          }
          else if ( cellCurrentState == 5  ) {
            cellNextState = 6;
          }
          else if ( cellCurrentState == 6  ) {
            cellNextState = 7;
          }
          else if ( cellCurrentState == 7 && counter4 >= 5 ) {
            cellNextState = 3;
          }
          else {
            cellNextState = cellCurrentState;
          }
        }
        else {
          cellNextState = 7;
        }
        nextGen.Add(cellNextState);
      }

      B = nextGen;

      currentGen.Clear();

      for (int k = 0; k < nextGen.Count; ++k ) {
        currentGen.Add(nextGen[k]);
      }

      //
    }
